# Day 6

## Part 1

```elixir
defmodule A do
  def recur(fishes, count) do
    new_fishes = Enum.filter(fishes, &(&1 == 0)) |> Enum.map(fn _ -> 8 end)

    fishes =
      fishes
      |> Enum.map(fn
        0 -> 6
        x -> x - 1
      end)

    fishes = fishes ++ new_fishes

    if count == 1 do
      fishes
    else
      recur(fishes, count - 1)
    end
  end
end
```

```elixir
input =
  "4,5,3,2,3,3,2,4,2,1,2,4,5,2,2,2,4,1,1,1,5,1,1,2,5,2,1,1,4,4,5,5,1,2,1,1,5,3,5,2,4,3,2,4,5,3,2,1,4,1,3,1,2,4,1,1,4,1,4,2,5,1,4,3,5,2,4,5,4,2,2,5,1,1,2,4,1,4,4,1,1,3,1,2,3,2,5,5,1,1,5,2,4,2,2,4,1,1,1,4,2,2,3,1,2,4,5,4,5,4,2,3,1,4,1,3,1,2,3,3,2,4,3,3,3,1,4,2,3,4,2,1,5,4,2,4,4,3,2,1,5,3,1,4,1,1,5,4,2,4,2,2,4,4,4,1,4,2,4,1,1,3,5,1,5,5,1,3,2,2,3,5,3,1,1,4,4,1,3,3,3,5,1,1,2,5,5,5,2,4,1,5,1,2,1,1,1,4,3,1,5,2,3,1,3,1,4,1,3,5,4,5,1,3,4,2,1,5,1,3,4,5,5,2,1,2,1,1,1,4,3,1,4,2,3,1,3,5,1,4,5,3,1,3,3,2,2,1,5,5,4,3,2,1,5,1,3,1,3,5,1,1,2,1,1,1,5,2,1,1,3,2,1,5,5,5,1,1,5,1,4,1,5,4,2,4,5,2,4,3,2,5,4,1,1,2,4,3,2,1"
  |> String.split(",")
  |> Enum.map(&String.to_integer/1)

input =
  "3,4,3,1,2"
  |> String.split(",")
  |> Enum.map(&String.to_integer/1)

A.recur(input, 80) |> Enum.count()
```

```elixir
defmodule D do
  def recur(input, count) do
    if count < 16 do
      A.recur(input, count)
    else
      D.recur(input, count / 2)
      |> Enum.flat_map(fn x -> D.recur([x], count / 2) end)
    end
  end
end

# every 4 results in 2 fish 
lookup = 0..9 |> Enum.reduce(%{}, fn x, acc -> Map.put(acc, x, D.recur([x], 128)) end)
lookup2 = Enum.map(lookup, fn {k, v} -> {k, Enum.count(v)} end) |> Map.new()

lookup3 =
  0..9
  |> Enum.reduce(%{}, fn x, acc ->
    val =
      Map.get(lookup, x)
      |> Enum.map(fn v ->
        Map.get(lookup2, v)
      end)
      |> Enum.sum()

    Map.put(acc, x, val)
  end)
```

```elixir
input =
  "4,5,3,2,3,3,2,4,2,1,2,4,5,2,2,2,4,1,1,1,5,1,1,2,5,2,1,1,4,4,5,5,1,2,1,1,5,3,5,2,4,3,2,4,5,3,2,1,4,1,3,1,2,4,1,1,4,1,4,2,5,1,4,3,5,2,4,5,4,2,2,5,1,1,2,4,1,4,4,1,1,3,1,2,3,2,5,5,1,1,5,2,4,2,2,4,1,1,1,4,2,2,3,1,2,4,5,4,5,4,2,3,1,4,1,3,1,2,3,3,2,4,3,3,3,1,4,2,3,4,2,1,5,4,2,4,4,3,2,1,5,3,1,4,1,1,5,4,2,4,2,2,4,4,4,1,4,2,4,1,1,3,5,1,5,5,1,3,2,2,3,5,3,1,1,4,4,1,3,3,3,5,1,1,2,5,5,5,2,4,1,5,1,2,1,1,1,4,3,1,5,2,3,1,3,1,4,1,3,5,4,5,1,3,4,2,1,5,1,3,4,5,5,2,1,2,1,1,1,4,3,1,4,2,3,1,3,5,1,4,5,3,1,3,3,2,2,1,5,5,4,3,2,1,5,1,3,1,3,5,1,1,2,1,1,1,5,2,1,1,3,2,1,5,5,5,1,1,5,1,4,1,5,4,2,4,5,2,4,3,2,5,4,1,1,2,4,3,2,1"
  |> String.split(",")
  |> Enum.map(&String.to_integer/1)

Enum.reduce(input, 0, fn i, acc -> acc + Map.get(lookup3, i) end)
```
